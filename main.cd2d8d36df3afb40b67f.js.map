{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","stateUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HACMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAAQF,KADF,GAEJA,OAMRI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCfXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAE/B,OAAO,IAAIb,SAAS,SAACC,GAGjBA,EAFiBW,EAASE,KAAI,SAAAC,GAAI,OACvCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAQ1DZ,EAAS,SAAAa,GAAU,OAAIX,QAAQY,MAAMD,IAG3CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCvBnC,IAMMe,EAAkB,SAACC,GACrB,IAP+BC,EAAKC,EAO9BvB,GAPyBsB,EAOS,IAPJC,EAOS,IANxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAQlD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GACzBvB,YAAW,WACYoB,KAAKE,SAAW,GAG/BvB,EAAQkB,EAAYO,GAAI5B,GAExB2B,EAAON,EAAYO,MAExB5B,OAML6B,EAAa,SAACD,EAAItB,GACtBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAIFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.cd2d8d36df3afb40b67f.js","sourcesContent":["\r\nconst delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, `${ms}`);\r\n    \r\n    })\r\n}\r\n\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n \r\n\r\n\r\n\r\n","\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n\r\n    return new Promise ((resolve) => {\r\n      const stateUsers = allUsers.map(user =>\r\n   user.name === userName ?  {...user, active: !user.active } : user);\r\n        resolve(stateUsers);\r\n    })\r\n\r\n    \r\n\r\n};\r\n\r\nconst logger = stateUsers => console.table(stateUsers);\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve(transaction.id, delay);\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n        \r\n    });\r\n\r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}